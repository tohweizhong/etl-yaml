getwd()
library(yaml)
yml <- yaml.load_file("yaml/ds_transform_ldr_globe.yaml")
yml <- yaml.load_file("yaml/adult_etl.yaml")
str(yml)
yml$input_columns
names(yml)
library(data.table)
df <- read.csv("data/adult.txt")
str(df)
df <- read.csv("data/adult.txt", stringsAsFactors = FALSE)
str(df)
yml <- yaml.load_file("yaml/adult_etl.yaml")
yml <- yaml.load_file("yaml/adult_etl.yaml")
str(yml)
names(yml)
yml$transformations
str(yml$transformations)
yml$transformations
yml <- yaml.load_file("yaml/adult_etl.yaml")
yml$transformations
?.Call
?call
call(log, 9)
call("log"", 9)
)
call("log", 9)
call("log", 9) %>% str
str(call("log", 9))
eval(call("log", 9))
?eval
str(eval(call("log", 9)))
subset(df, select = -c(1,2,3))
str(subset(df, select = -c(1,2,3)))
dim(df)
colnames(df)
idx <- c(1,2,3)
str(subset(df, select = -idx)
)
install.packages("magrittr")
library(magrittr)
yml$transformations
yml$transformations[[1]]
yml$transformations[[1]]$name
yml$transformations[[1]]$name %>% call(, df, idx)
call(drop_column)
call("drop_column")
call("drop_column", df, idx)
str(call("drop_column", df, idx))
foo <- (call("drop_column", df, idx)
foo <- eval(call("drop_column", df, idx))\
foo <- eval(call("drop_column", df, idx))
# function to drop column
drop_column <- function(df, idx){
df %>% subset(., select = -idx) %>% return
}
foo <- eval(call("drop_column", df, idx))
foo <- yml$transformations[[1]]$name %>% call(, df, idx)
foo <- yml$transformations[[1]]$name %>% call(., df, idx)
str(foo)
foo <- yml$transformations[[1]]$name %>% call(., df, idx) %>% eval
yml <- yaml.load_file("yaml/adult_etl.yaml")
df <- read.csv("data/adult.txt", stringsAsFactors = FALSE)
yml <- yaml.load_file("yaml/adult_etl.yaml")
yml <- yaml.load_file("yaml/adult_etl.yaml")
names(yml)
yml$input_arguments
df <- yml$input_arguments[[1]]$value %>% read.csv()
ste(df)
str(df)
df <- yml$input_arguments[[1]]$value %>% read.csv(, stringsAsFactors = FALSE)
foo <- yml$transformations[[1]]$name %>% call(., df, idx) %>% eval
df <- yml$input_arguments[[1]]$value %>% read.csv(, stringsAsFactors = FALSE)
foo <- yml$transformations[[1]]$name %>% call(., df, idx) %>% eval
df <- yml$input_arguments[[1]]$value %>% read.csv(, stringsAsFactors = FALSE)
# function to drop column
drop_column <- function(df, idx){
df %>% subset(., select = -idx) %>% return
}
#yml <- yaml.load_file("yaml/ds_transform_ldr_globe.yaml")
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformation
# - drop column
# - take log
df <- yml$input_arguments[[1]]$value %>% read.csv(, stringsAsFactors = FALSE)
# function to drop column
drop_column <- function(df, idx){
df %>% subset(., select = -idx) %>% return
}
foo <- yml$transformations[[1]]$name %>% call(., df, idx) %>% eval
foo <- yml$transformations[[1]]$name %>% call(., df, idx) %>% eval
foo <- yml$transformations[[1]]$name %>% call(., df, yml$transformations[[1]]$index) %>% eval
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformation
# - drop column
# - take log
df <- yml$input_arguments[[1]]$value %>% read.csv(, stringsAsFactors = FALSE)
# function to drop column
drop_column <- function(df, idx){
df %>% subset(., select = -idx) %>% return
}
foo <- yml$transformations[[1]]$name %>% call(., df, yml$transformations[[1]]$index) %>% eval
yml$transformations[[1]]$index
yml <- yaml.load_file("yaml/adult_etl.yaml")
yml <- yaml.load_file("yaml/adult_etl.yaml")
yml$transformations[[1]]$index
which(is.null(yml))
yml$transformations[[1:2]]$index
yml$transformations[[2]]$index
yml$transformations[[3]]$index
yml$transformations[[1]]$index
yml$transformations[[1]]
yml$transformations[[1]] %>% str
yml$transformations[[1]] %>% unlist
yml$transformations[[1]] %>% unlist
install.packages("rlist")
library(rlist)
list.clean(yml$transformations, fun = is.null, recursive = TRUE)
?list.clean
lapply(yml$transformations, FUN = )
yml$transformations[[1]]
yml$transformations[[1]] %>% unlist %>% is.null %>% any
yml$transformations[[1]] %>% unlist %>% is.null
yml$transformations[[1]] %>% unlist %>% any(., is.null)
any(c(1,2,NA), is.na)
any(c(1,2,3), is.na)
?any
yml$transformations[[1]] %>% unlist %>% is.null
yml$transformations[[1]] %>% unlist %>
yml$transformations[[1]] %>% unlist
yml$transformations[[1]] %>% unlist %>% lenght
yml$transformations[[1]] %>% unlist %>% length
yml$transformations[[2]] %>% unlist %>% length
yml <- yaml.load_file("yaml/adult_etl.yaml")
yml$transformations[[1]] %>% unlist %>% length
yml$transformations[[1]] %>% unlist
yml <- yaml.load_file("yaml/adult_etl.yaml")
yml$transformations[[1]] %>% unlist
?equal
??equal
el %>% unlist %>% length %>% identical(., 2)
el
?el
ele %>% unlist %>% length %>% identical(., 2)
ele <- yml$transformations[[1]]
ele
ele %>% unlist %>% length %>% identical(., 2)
ele %>% unlist %>% length %>% identical(., 1)
ele %>% unlist %>% length
ele %>% unlist %>% length %>% all.equal(., 2)
ele %>% unlist %>% length %>% all.equal(., 1)
ele %>% unlist %>% length %>% all.equal(., 4)
ele %>% unlist %>% length %>% all.equal(., 4) %>% str
ele %>% unlist %>% length %>% all.equal(., 4) %>% isTRUE
ele %>% unlist %>% length %>% all.equal(., 1) %>% isTRUE
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
hasIdx
lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(el, return(NULL)))
})
?ifelse
lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(el), return(NULL))
})
lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return(NULL))
})
transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return(NULL))
})
transformations
transformations %>% length
transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return())
})
transformations
transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
transformations
source("etl_functions.R")
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
required_transformations
required_transformations %>% length
required_transformations %>% str
yml <- yaml.load_file("yaml/adult_etl.yaml")
df <- yml$input_arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
required_transformations
yml$transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
required_transformations
ele
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
ifelse(hasIdx, return(ele), return())
})
required_transformations
yml$transformations[[1]]
ele <- yml$transformations[[1]]
hasIdx <- ele %>% unlist %>% length %>% all.equal(., 2) %>% isTRUE
hasIdx
hasIdx <- ele %>% unlist %>% length %>%
hasIdx <- ele %>% unlist %>% length
ele %>% unlist %>% length
ele
ele %>% unlist
?more
??more
?compareVersion
?compare
??compare
ele %>% unlist %>% length %>% `>`(., 2)
ele <- yml$transformations[[2]]
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1)
hasIdx
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
required_transformations
str(df)
lapply(required_transformations, FUN = function(ele){
ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
})
lapply(required_transformations, FUN = function(ele){
ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
}) %>% dim
lapply(required_transformations, FUN = function(ele){
ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
}) %>% str
df2 <- lapply(required_transformations, FUN = function(ele){
ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
}) %>% unlist
str(df2)
# transformations
df2 <- lapply(required_transformations, FUN = function(ele){
ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
})
str(df2)
?atatch
?attach
?lappy
?lapply
# transformations
df2 <- lapply(required_transformations, FUN = function(ele){
ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
}, simplify = TRUE)
df2 <- sapply(required_transformations, FUN = function(ele){
ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
}, simplify = TRUE)
str(df2)
required_transformations
dim(df)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
})
str(df)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe\
return()
})
str(df)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return()
})
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
yml <- yaml.load_file("yaml/adult_etl.yaml")
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
required_transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
# load yaml file
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformations
# - drop column
# - take log
# read data
df <- yml$input_arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
# load yaml file
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformations
# - drop column
# - take log
# read data
df <- yml$input_arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
colnames(df)
df$age
View(df)
source("etl_functions.R")
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformations
# - drop column
# - take log
# read data
df <- yml$input_arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
df <- yml$input_arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
source("etl_functions.R")
# load yaml file
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformations
# - drop column
# - take log
# read data
df <- yml$input_arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
View(df)
# etl_functions.R
# every function has only two arguments: df and idx
# function to drop column
drop_column <- function(df, idx){
df %>% subset(., select = -idx) %>% return
}
# use data.table syntax
take_log <- function(df, idx){
df[,idx] <- log10(df[,idx])
return(df)
}
source("etl_functions.R")
# load yaml file
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformations
# - drop column
# - take log
# read data
df <- yml$input_arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
str(df)
View(df)
dim(df)
write.table(df, yml$arguments[[3]]$value)
?write.table
write.table(x = df, file = yml$arguments[[3]]$value)
yml <- yaml.load_file("yaml/adult_etl.yaml")
# simple transformations
# - drop column
# - take log
# read data
df <- yml$arguments[[1]]$value %>% read.csv(., stringsAsFactors = FALSE)
# get required transformations
required_transformations <- lapply(yml$transformations, FUN = function(ele){
hasIdx <- ele %>% unlist %>% length %>% `>`(., 1) %>% isTRUE
ifelse(hasIdx, return(ele), return())
}) %>% list.clean(., fun = is.null)
# transformations
lapply(required_transformations, FUN = function(ele){
df <<- ele$name %>% call(., df, ele$index) %>% eval # returns dataframe
return(".")
})
# output
write.table(x = df, file = yml$arguments[[3]]$value)
write.table(x = df, file = yml$arguments[[3]]$value, row.names = FALSE)
?data.table
return
1 %>% return
